//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FPBMTTC_FinalC_M_vs2017_ServiceAPI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MagicECertCAEntities : DbContext
    {
        public MagicECertCAEntities()
            : base("name=MagicECertCAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<X509Certificate> X509Certificate { get; set; }
        public virtual DbSet<PersonalData> PersonalDatas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int spDeleteCA(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCA", idParameter);
        }
    
        public virtual int spDeletePersonData(Nullable<int> uId, Nullable<int> caId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            var caIdParameter = caId.HasValue ?
                new ObjectParameter("caId", caId) :
                new ObjectParameter("caId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePersonData", uIdParameter, caIdParameter);
        }
    
        public virtual int spDeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUser", idParameter);
        }
    
        public virtual int spInsertPersonalData(string publicKey, string privateKey, string serialNumber, Nullable<int> uId, Nullable<int> cAId)
        {
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("PublicKey", publicKey) :
                new ObjectParameter("PublicKey", typeof(string));
    
            var privateKeyParameter = privateKey != null ?
                new ObjectParameter("PrivateKey", privateKey) :
                new ObjectParameter("PrivateKey", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            var cAIdParameter = cAId.HasValue ?
                new ObjectParameter("CAId", cAId) :
                new ObjectParameter("CAId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPersonalData", publicKeyParameter, privateKeyParameter, serialNumberParameter, uIdParameter, cAIdParameter);
        }
    
        public virtual int spInsertUser(string userName, string password, string mail)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertUser", userNameParameter, passwordParameter, mailParameter);
        }
    
        public virtual int spInsertX509Cert(Nullable<double> version, string serial, string signatureAlgorithm, string issuer, string validity, string subject, string @public, string extensions, string signature)
        {
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(double));
    
            var serialParameter = serial != null ?
                new ObjectParameter("serial", serial) :
                new ObjectParameter("serial", typeof(string));
    
            var signatureAlgorithmParameter = signatureAlgorithm != null ?
                new ObjectParameter("signatureAlgorithm", signatureAlgorithm) :
                new ObjectParameter("signatureAlgorithm", typeof(string));
    
            var issuerParameter = issuer != null ?
                new ObjectParameter("issuer", issuer) :
                new ObjectParameter("issuer", typeof(string));
    
            var validityParameter = validity != null ?
                new ObjectParameter("validity", validity) :
                new ObjectParameter("validity", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("subject", subject) :
                new ObjectParameter("subject", typeof(string));
    
            var publicParameter = @public != null ?
                new ObjectParameter("public", @public) :
                new ObjectParameter("public", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("extensions", extensions) :
                new ObjectParameter("extensions", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("signature", signature) :
                new ObjectParameter("signature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertX509Cert", versionParameter, serialParameter, signatureAlgorithmParameter, issuerParameter, validityParameter, subjectParameter, publicParameter, extensionsParameter, signatureParameter);
        }
    
        public virtual int spUpdateUser(Nullable<int> id, string userName, string password, string mail)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUser", idParameter, userNameParameter, passwordParameter, mailParameter);
        }
    
        public virtual int spUpdateX509Cert(Nullable<int> iD, string version, string serialNumber, string signatureAlgorithm, string issuerName, string validityPeriod, string publicKey, string subjectuniqueID, string extensions, string signature)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var signatureAlgorithmParameter = signatureAlgorithm != null ?
                new ObjectParameter("SignatureAlgorithm", signatureAlgorithm) :
                new ObjectParameter("SignatureAlgorithm", typeof(string));
    
            var issuerNameParameter = issuerName != null ?
                new ObjectParameter("IssuerName", issuerName) :
                new ObjectParameter("IssuerName", typeof(string));
    
            var validityPeriodParameter = validityPeriod != null ?
                new ObjectParameter("ValidityPeriod", validityPeriod) :
                new ObjectParameter("ValidityPeriod", typeof(string));
    
            var publicKeyParameter = publicKey != null ?
                new ObjectParameter("PublicKey", publicKey) :
                new ObjectParameter("PublicKey", typeof(string));
    
            var subjectuniqueIDParameter = subjectuniqueID != null ?
                new ObjectParameter("SubjectuniqueID", subjectuniqueID) :
                new ObjectParameter("SubjectuniqueID", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("Extensions", extensions) :
                new ObjectParameter("Extensions", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateX509Cert", iDParameter, versionParameter, serialNumberParameter, signatureAlgorithmParameter, issuerNameParameter, validityPeriodParameter, publicKeyParameter, subjectuniqueIDParameter, extensionsParameter, signatureParameter);
        }
    }
}
